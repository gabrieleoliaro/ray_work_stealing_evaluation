# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 0

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 0

initial_workers: 0

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0


# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker: {}


# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 15

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-east-2 #eu-south-1
    availability_zone: us-east-2b, us-east-2a, # eu-south-1, eu-central-1, eu-west-3
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: True # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
head_node:
    InstanceType: m4.16xlarge
# ImageId: ami-0def3275  # Default Ubuntu 16.04 AMI.
    ImageId: ami-0a63f96e85105c6d3 # Ubuntu 18.04 LTS amd64 AMI in us-east-2 found here -> https://cloud-images.ubuntu.com/locator/ec2/ 

    # Set primary volume to 25 GiB
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 50

    # Additional options in the boto docs.

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields such as SubnetId and KeyName.
# For more documentation on available fields, see:
# http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
worker_nodes:
    InstanceType: m4.16xlarge
#ImageId: ami-0def3275  # Default Ubuntu 16.04 AMI.
    ImageId: ami-0a63f96e85105c6d3 # Ubuntu 18.04 LTS amd64 AMI in us-east-2 found here -> https://cloud-images.ubuntu.com/locator/ec2/

    # Set primary volume to 25 GiB
    BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
              VolumeSize: 50

    # Run workers on spot by default. Comment this out to use on-demand.
    InstanceMarketOptions:
        MarketType: spot
        # Additional options can be found in the boto docs, e.g.
        #   SpotOptions:
        #       MaxPrice: MAX_HOURLY_PRICE

    # Additional options in the boto docs.

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/path1/on/remote/machine": "/path1/on/local/machine",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude: []

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter: []

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []


# List of shell commands to run to set up nodes.
setup_commands: []
    # # # Consider uncommenting these if you run into dpkg locking issues
    # # - sudo pkill -9 apt-get || true
    # # - sudo pkill -9 dpkg || true
    # # - sudo dpkg --configure -a
    # # # Install basics.
    # - sudo apt-get upgrade && sudo apt-get update
    # - sudo apt-get install -y build-essential curl unzip psmisc
    # - sudo apt install gcc git gnupg g++ make
    # - sudo apt install default-jre default-jdk
    # - sudo apt install redis-tools
    # # Install Node.js in order to build the dashboard.
    # - curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash
    # - sudo apt-get install -y nodejs
    # # Install Anaconda.
    # - wget https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh || true
    # - bash Anaconda3-2020.02-Linux-x86_64.sh -b -p $HOME/anaconda3 || true
    # - echo 'export PATH="$HOME/anaconda3/bin:$PATH"' >> ~/.bashrc
    # - conda install redis-py
    # # Build Ray.
    # - git clone https://github.com/gabrieleoliaro/ray.git || true
    # - cd ray && git checkout atomic_work_stealing && cd .. || true
    # - pip install PyQt5==5.12.3 PyQtWebEngine==5.12.1 pytest-cov pytest-filter-subpackage
    # - sudo ray/ci/travis/install-bazel.sh
    # - cd ray/dashboard/client; sudo npm install; sudo npm run build
    # - pip install boto3==1.4.8 cython==0.29.0 pytest aiohttp grpcio psutil setproctitle 
    # # Set the bazel cache
    # - echo 'build --disk_cache=~/bazel-cache' >> ~/.bazelrc
    # - cd ray/python; pip install -e . --verbose
    # # Set the Ray debugging environmental variable
    # #- echo 'export RAY_BACKEND_LOG_LEVEL="debug"' >> ~/.bashrc
    
    
 

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --head --num-redis-shards=10 --port=6379 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379
